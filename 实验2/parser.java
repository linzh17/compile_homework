
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Random;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\011\000\002\004\007" +
    "\000\002\004\007\000\002\004\006\000\002\004\011\000" +
    "\002\004\005\000\002\004\004\000\002\004\005\000\002" +
    "\004\005\000\002\004\006\000\002\004\007\000\002\004" +
    "\010\000\002\004\005\000\002\004\010\000\002\004\011" +
    "\000\002\004\010\000\002\004\007\000\002\005\011\000" +
    "\002\005\007\000\002\005\006\000\002\005\011\000\002" +
    "\005\005\000\002\005\004\000\002\005\005\000\002\005" +
    "\005\000\002\005\006\000\002\005\007\000\002\005\010" +
    "\000\002\005\011\000\002\005\005\000\002\005\010\000" +
    "\002\005\010\000\002\005\007\000\002\015\004\000\002" +
    "\015\003\000\002\016\005\000\002\016\007\000\002\016" +
    "\004\000\002\016\006\000\002\016\004\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\003\000\002\013\003\000\002\013\006" +
    "\000\002\013\006\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\022\004\011\006\004\007\016\011\010\012" +
    "\005\013\015\036\012\041\013\001\002\000\004\032\270" +
    "\001\002\000\004\032\263\001\002\000\026\002\ufffe\004" +
    "\ufffe\006\ufffe\007\ufffe\011\ufffe\012\ufffe\013\ufffe\036\ufffe" +
    "\037\ufffe\041\ufffe\001\002\000\004\002\262\001\002\000" +
    "\004\041\254\001\002\000\004\032\144\001\002\000\022" +
    "\004\011\006\004\007\016\011\010\012\005\013\015\036" +
    "\012\041\013\001\002\000\010\023\071\032\073\034\072" +
    "\001\002\000\024\002\001\004\011\006\004\007\016\011" +
    "\010\012\005\013\015\036\012\041\013\001\002\000\004" +
    "\032\064\001\002\000\014\010\020\024\022\032\023\040" +
    "\021\041\017\001\002\000\040\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\024\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\033\uffc9\034\061\035\uffc9\001\002" +
    "\000\004\032\056\001\002\000\036\014\uffca\015\uffca\016" +
    "\uffca\017\uffca\020\uffca\021\uffca\022\uffca\024\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\033\uffca\035\uffca\001\002\000" +
    "\026\002\ufff7\004\ufff7\006\ufff7\007\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\036\ufff7\037\ufff7\041\ufff7\001\002\000\012\010" +
    "\020\032\023\040\021\041\017\001\002\000\032\014\037" +
    "\015\036\016\035\017\033\020\032\021\030\022\027\024" +
    "\031\026\034\027\025\030\040\031\026\001\002\000\012" +
    "\010\020\032\023\040\021\041\017\001\002\000\012\010" +
    "\020\032\023\040\021\041\017\001\002\000\012\010\020" +
    "\032\023\040\021\041\017\001\002\000\012\010\020\032" +
    "\023\040\021\041\017\001\002\000\026\002\ufff6\004\ufff6" +
    "\006\ufff6\007\ufff6\011\ufff6\012\ufff6\013\ufff6\036\ufff6\037" +
    "\ufff6\041\ufff6\001\002\000\012\010\020\032\023\040\021" +
    "\041\017\001\002\000\012\010\020\032\023\040\021\041" +
    "\017\001\002\000\012\010\020\032\023\040\021\041\017" +
    "\001\002\000\012\010\020\032\023\040\021\041\017\001" +
    "\002\000\012\010\020\032\023\040\021\041\017\001\002" +
    "\000\012\010\020\032\023\040\021\041\017\001\002\000" +
    "\012\010\020\032\023\040\021\041\017\001\002\000\036" +
    "\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\033\uffcc" +
    "\035\uffcc\001\002\000\036\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\024\uffd5\026\034\027\025" +
    "\030\040\031\026\033\uffd5\035\uffd5\001\002\000\036\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\024\uffd4\026\034\027\025\030\040\031\026\033\uffd4\035" +
    "\uffd4\001\002\000\036\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\024\uffd3\026\034\027\025\030" +
    "\040\031\026\033\uffd3\035\uffd3\001\002\000\036\014\uffce" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\024" +
    "\uffce\026\uffce\027\uffce\030\040\031\026\033\uffce\035\uffce" +
    "\001\002\000\036\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\024\uffd2\026\034\027\025\030\040" +
    "\031\026\033\uffd2\035\uffd2\001\002\000\036\014\037\015" +
    "\036\016\035\017\033\020\uffd1\021\uffd1\022\uffd1\024\uffd1" +
    "\026\034\027\025\030\040\031\026\033\uffd1\035\uffd1\001" +
    "\002\000\036\014\037\015\036\016\035\017\033\020\uffd0" +
    "\021\uffd0\022\uffd0\024\uffd0\026\034\027\025\030\040\031" +
    "\026\033\uffd0\035\uffd0\001\002\000\036\014\037\015\036" +
    "\016\035\017\033\020\032\021\030\022\uffcf\024\uffcf\026" +
    "\034\027\025\030\040\031\026\033\uffcf\035\uffcf\001\002" +
    "\000\036\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\024\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\033\uffcb\035\uffcb\001\002\000\036\014\uffcd\015\uffcd\016" +
    "\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\024\uffcd\026\uffcd" +
    "\027\uffcd\030\040\031\026\033\uffcd\035\uffcd\001\002\000" +
    "\032\014\037\015\036\016\035\017\033\020\032\021\030" +
    "\022\027\026\034\027\025\030\040\031\026\033\055\001" +
    "\002\000\036\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\024\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\033\uffc6\035\uffc6\001\002\000\012\010\020\032\023" +
    "\040\021\041\017\001\002\000\032\014\037\015\036\016" +
    "\035\017\033\020\032\021\030\022\027\026\034\027\025" +
    "\030\040\031\026\033\060\001\002\000\036\014\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\024\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\031\uffc7\033\uffc7\035\uffc7\001" +
    "\002\000\012\010\020\032\023\040\021\041\017\001\002" +
    "\000\032\014\037\015\036\016\035\017\033\020\032\021" +
    "\030\022\027\026\034\027\025\030\040\031\026\035\063" +
    "\001\002\000\036\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\024\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\033\uffc8\035\uffc8\001\002\000\012\010\020\032" +
    "\023\040\021\041\017\001\002\000\032\014\037\015\036" +
    "\016\035\017\033\020\032\021\030\022\027\026\034\027" +
    "\025\030\040\031\026\033\066\001\002\000\004\024\067" +
    "\001\002\000\026\002\uffed\004\uffed\006\uffed\007\uffed\011" +
    "\uffed\012\uffed\013\uffed\036\uffed\037\uffed\041\uffed\001\002" +
    "\000\026\002\uffff\004\uffff\006\uffff\007\uffff\011\uffff\012" +
    "\uffff\013\uffff\036\uffff\037\uffff\041\uffff\001\002\000\030" +
    "\004\011\006\004\007\016\010\020\011\010\012\005\013" +
    "\015\032\023\036\012\040\021\041\135\001\002\000\012" +
    "\010\020\032\023\040\021\041\017\001\002\000\012\011" +
    "\075\033\076\040\077\041\074\001\002\000\006\024\122" +
    "\034\123\001\002\000\004\041\115\001\002\000\006\024" +
    "\111\036\112\001\002\000\004\024\110\001\002\000\012" +
    "\011\uffdb\033\uffdb\040\uffdb\041\uffdb\001\002\000\012\011" +
    "\075\033\102\040\077\041\074\001\002\000\006\024\104" +
    "\036\105\001\002\000\012\011\uffdc\033\uffdc\040\uffdc\041" +
    "\uffdc\001\002\000\026\002\ufff3\004\ufff3\006\ufff3\007\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\036\ufff3\037\ufff3\041\ufff3\001" +
    "\002\000\022\004\011\006\004\007\016\011\010\012\005" +
    "\013\015\036\012\041\013\001\002\000\024\004\011\006" +
    "\004\007\016\011\010\012\005\013\015\036\012\037\107" +
    "\041\013\001\002\000\026\002\uffef\004\uffef\006\uffef\007" +
    "\uffef\011\uffef\012\uffef\013\uffef\036\uffef\037\uffef\041\uffef" +
    "\001\002\000\012\011\uffd6\033\uffd6\040\uffd6\041\uffd6\001" +
    "\002\000\026\002\ufff4\004\ufff4\006\ufff4\007\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\036\ufff4\037\ufff4\041\ufff4\001\002\000" +
    "\022\004\011\006\004\007\016\011\010\012\005\013\015" +
    "\036\012\041\013\001\002\000\024\004\011\006\004\007" +
    "\016\011\010\012\005\013\015\036\012\037\114\041\013" +
    "\001\002\000\026\002\ufff2\004\ufff2\006\ufff2\007\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\036\ufff2\037\ufff2\041\ufff2\001\002" +
    "\000\006\024\116\034\117\001\002\000\012\011\uffda\033" +
    "\uffda\040\uffda\041\uffda\001\002\000\004\035\120\001\002" +
    "\000\004\024\121\001\002\000\012\011\uffd9\033\uffd9\040" +
    "\uffd9\041\uffd9\001\002\000\012\011\uffd8\033\uffd8\040\uffd8" +
    "\041\uffd8\001\002\000\004\035\124\001\002\000\004\024" +
    "\125\001\002\000\012\011\uffd7\033\uffd7\040\uffd7\041\uffd7" +
    "\001\002\000\032\014\037\015\036\016\035\017\033\020" +
    "\032\021\030\022\027\026\034\027\025\030\040\031\026" +
    "\035\127\001\002\000\004\023\130\001\002\000\012\010" +
    "\020\032\023\040\021\041\017\001\002\000\032\014\037" +
    "\015\036\016\035\017\033\020\032\021\030\022\027\024" +
    "\132\026\034\027\025\030\040\031\026\001\002\000\026" +
    "\002\ufff9\004\ufff9\006\ufff9\007\ufff9\011\ufff9\012\ufff9\013" +
    "\ufff9\036\ufff9\037\ufff9\041\ufff9\001\002\000\026\002\ufff8" +
    "\004\ufff8\006\ufff8\007\ufff8\011\ufff8\012\ufff8\013\ufff8\036" +
    "\ufff8\037\ufff8\041\ufff8\001\002\000\032\014\037\015\036" +
    "\016\035\017\033\020\032\021\030\022\027\024\141\026" +
    "\034\027\025\030\040\031\026\001\002\000\040\014\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023" +
    "\071\024\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\073" +
    "\034\136\001\002\000\012\010\020\032\023\040\021\041" +
    "\017\001\002\000\032\014\037\015\036\016\035\017\033" +
    "\020\032\021\030\022\027\026\034\027\025\030\040\031" +
    "\026\035\140\001\002\000\034\014\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\130\024\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\001\002\000\026\002\ufffa" +
    "\004\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa\013\ufffa\036" +
    "\ufffa\037\ufffa\041\ufffa\001\002\000\024\004\011\006\004" +
    "\007\016\011\010\012\005\013\015\036\012\037\143\041" +
    "\013\001\002\000\026\002\ufff5\004\ufff5\006\ufff5\007\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\036\ufff5\037\ufff5\041\ufff5\001" +
    "\002\000\012\010\020\032\023\040\021\041\017\001\002" +
    "\000\032\014\037\015\036\016\035\017\033\020\032\021" +
    "\030\022\027\026\034\027\025\030\040\031\026\033\146" +
    "\001\002\000\022\004\153\006\147\007\157\011\152\012" +
    "\151\013\156\036\154\041\155\001\002\000\004\032\247" +
    "\001\002\000\026\002\ufffc\004\ufffc\006\ufffc\007\ufffc\011" +
    "\ufffc\012\ufffc\013\ufffc\036\ufffc\037\ufffc\041\ufffc\001\002" +
    "\000\004\032\242\001\002\000\004\041\234\001\002\000" +
    "\004\032\226\001\002\000\022\004\011\006\004\007\016" +
    "\011\010\012\005\013\015\036\012\041\013\001\002\000" +
    "\010\023\172\032\174\034\173\001\002\000\004\032\166" +
    "\001\002\000\014\010\020\024\163\032\023\040\021\041" +
    "\017\001\002\000\004\005\161\001\002\000\022\004\011" +
    "\006\004\007\016\011\010\012\005\013\015\036\012\041" +
    "\013\001\002\000\026\002\ufffd\004\ufffd\006\ufffd\007\ufffd" +
    "\011\ufffd\012\ufffd\013\ufffd\036\ufffd\037\ufffd\041\ufffd\001" +
    "\002\000\030\002\ufff7\004\ufff7\005\uffe7\006\ufff7\007\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\036\ufff7\037\ufff7\041\ufff7\001" +
    "\002\000\032\014\037\015\036\016\035\017\033\020\032" +
    "\021\030\022\027\024\165\026\034\027\025\030\040\031" +
    "\026\001\002\000\030\002\ufff6\004\ufff6\005\uffe6\006\ufff6" +
    "\007\ufff6\011\ufff6\012\ufff6\013\ufff6\036\ufff6\037\ufff6\041" +
    "\ufff6\001\002\000\012\010\020\032\023\040\021\041\017" +
    "\001\002\000\032\014\037\015\036\016\035\017\033\020" +
    "\032\021\030\022\027\026\034\027\025\030\040\031\026" +
    "\033\170\001\002\000\004\024\171\001\002\000\030\002" +
    "\uffed\004\uffed\005\uffdd\006\uffed\007\uffed\011\uffed\012\uffed" +
    "\013\uffed\036\uffed\037\uffed\041\uffed\001\002\000\030\004" +
    "\153\006\147\007\157\010\020\011\152\012\151\013\156" +
    "\032\023\036\154\040\021\041\216\001\002\000\012\010" +
    "\020\032\023\040\021\041\017\001\002\000\012\011\075" +
    "\033\175\040\077\041\074\001\002\000\006\024\204\036" +
    "\205\001\002\000\012\011\075\033\177\040\077\041\074" +
    "\001\002\000\006\024\200\036\201\001\002\000\030\002" +
    "\ufff3\004\ufff3\005\uffe3\006\ufff3\007\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\036\ufff3\037\ufff3\041\ufff3\001\002\000\022\004" +
    "\011\006\004\007\016\011\010\012\005\013\015\036\012" +
    "\041\013\001\002\000\024\004\011\006\004\007\016\011" +
    "\010\012\005\013\015\036\012\037\203\041\013\001\002" +
    "\000\030\002\uffef\004\uffef\005\uffe1\006\uffef\007\uffef\011" +
    "\uffef\012\uffef\013\uffef\036\uffef\037\uffef\041\uffef\001\002" +
    "\000\030\002\ufff4\004\ufff4\005\uffe4\006\ufff4\007\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\036\ufff4\037\ufff4\041\ufff4\001\002" +
    "\000\022\004\011\006\004\007\016\011\010\012\005\013" +
    "\015\036\012\041\013\001\002\000\024\004\011\006\004" +
    "\007\016\011\010\012\005\013\015\036\012\037\207\041" +
    "\013\001\002\000\030\002\ufff2\004\ufff2\005\uffe2\006\ufff2" +
    "\007\ufff2\011\ufff2\012\ufff2\013\ufff2\036\ufff2\037\ufff2\041" +
    "\ufff2\001\002\000\032\014\037\015\036\016\035\017\033" +
    "\020\032\021\030\022\027\026\034\027\025\030\040\031" +
    "\026\035\211\001\002\000\004\023\212\001\002\000\012" +
    "\010\020\032\023\040\021\041\017\001\002\000\032\014" +
    "\037\015\036\016\035\017\033\020\032\021\030\022\027" +
    "\024\214\026\034\027\025\030\040\031\026\001\002\000" +
    "\030\002\ufff9\004\ufff9\005\uffe9\006\ufff9\007\ufff9\011\ufff9" +
    "\012\ufff9\013\ufff9\036\ufff9\037\ufff9\041\ufff9\001\002\000" +
    "\032\014\037\015\036\016\035\017\033\020\032\021\030" +
    "\022\027\024\223\026\034\027\025\030\040\031\026\001" +
    "\002\000\040\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\172\024\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\174\034\220\001\002\000\004\005\uffe8" +
    "\001\002\000\012\010\020\032\023\040\021\041\017\001" +
    "\002\000\032\014\037\015\036\016\035\017\033\020\032" +
    "\021\030\022\027\026\034\027\025\030\040\031\026\035" +
    "\222\001\002\000\034\014\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\023\212\024\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\001\002\000\030\002\ufffa\004\ufffa" +
    "\005\uffea\006\ufffa\007\ufffa\011\ufffa\012\ufffa\013\ufffa\036" +
    "\ufffa\037\ufffa\041\ufffa\001\002\000\024\004\011\006\004" +
    "\007\016\011\010\012\005\013\015\036\012\037\225\041" +
    "\013\001\002\000\030\002\ufff5\004\ufff5\005\uffe5\006\ufff5" +
    "\007\ufff5\011\ufff5\012\ufff5\013\ufff5\036\ufff5\037\ufff5\041" +
    "\ufff5\001\002\000\012\010\020\032\023\040\021\041\017" +
    "\001\002\000\032\014\037\015\036\016\035\017\033\020" +
    "\032\021\030\022\027\026\034\027\025\030\040\031\026" +
    "\033\230\001\002\000\022\004\153\006\147\007\157\011" +
    "\152\012\151\013\156\036\154\041\155\001\002\000\004" +
    "\005\232\001\002\000\022\004\153\006\147\007\157\011" +
    "\152\012\151\013\156\036\154\041\155\001\002\000\004" +
    "\005\uffec\001\002\000\006\024\235\034\236\001\002\000" +
    "\030\002\ufff1\004\ufff1\005\uffe0\006\ufff1\007\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\036\ufff1\037\ufff1\041\ufff1\001\002\000" +
    "\012\010\020\032\023\040\021\041\017\001\002\000\032" +
    "\014\037\015\036\016\035\017\033\020\032\021\030\022" +
    "\027\026\034\027\025\030\040\031\026\035\240\001\002" +
    "\000\004\024\241\001\002\000\030\002\ufff0\004\ufff0\005" +
    "\uffdf\006\ufff0\007\ufff0\011\ufff0\012\ufff0\013\ufff0\036\ufff0" +
    "\037\ufff0\041\ufff0\001\002\000\004\033\243\001\002\000" +
    "\004\036\244\001\002\000\022\004\011\006\004\007\016" +
    "\011\010\012\005\013\015\036\012\041\013\001\002\000" +
    "\024\004\011\006\004\007\016\011\010\012\005\013\015" +
    "\036\012\037\246\041\013\001\002\000\030\002\uffee\004" +
    "\uffee\005\uffde\006\uffee\007\uffee\011\uffee\012\uffee\013\uffee" +
    "\036\uffee\037\uffee\041\uffee\001\002\000\012\010\020\032" +
    "\023\040\021\041\017\001\002\000\032\014\037\015\036" +
    "\016\035\017\033\020\032\021\030\022\027\026\034\027" +
    "\025\030\040\031\026\033\251\001\002\000\022\004\153" +
    "\006\147\007\157\011\152\012\151\013\156\036\154\041" +
    "\155\001\002\000\026\002\ufffb\004\ufffb\006\ufffb\007\ufffb" +
    "\011\ufffb\012\ufffb\013\ufffb\036\ufffb\037\ufffb\041\ufffb\001" +
    "\002\000\004\005\uffeb\001\002\000\006\024\255\034\256" +
    "\001\002\000\026\002\ufff1\004\ufff1\006\ufff1\007\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\036\ufff1\037\ufff1\041\ufff1\001\002" +
    "\000\012\010\020\032\023\040\021\041\017\001\002\000" +
    "\032\014\037\015\036\016\035\017\033\020\032\021\030" +
    "\022\027\026\034\027\025\030\040\031\026\035\260\001" +
    "\002\000\004\024\261\001\002\000\026\002\ufff0\004\ufff0" +
    "\006\ufff0\007\ufff0\011\ufff0\012\ufff0\013\ufff0\036\ufff0\037" +
    "\ufff0\041\ufff0\001\002\000\004\002\000\001\002\000\004" +
    "\033\264\001\002\000\004\036\265\001\002\000\022\004" +
    "\011\006\004\007\016\011\010\012\005\013\015\036\012" +
    "\041\013\001\002\000\024\004\011\006\004\007\016\011" +
    "\010\012\005\013\015\036\012\037\267\041\013\001\002" +
    "\000\026\002\uffee\004\uffee\006\uffee\007\uffee\011\uffee\012" +
    "\uffee\013\uffee\036\uffee\037\uffee\041\uffee\001\002\000\012" +
    "\010\020\032\023\040\021\041\017\001\002\000\032\014" +
    "\037\015\036\016\035\017\033\020\032\021\030\022\027" +
    "\026\034\027\025\030\040\031\026\033\272\001\002\000" +
    "\022\004\011\006\004\007\016\011\010\012\005\013\015" +
    "\036\012\041\013\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\010\002\006\003\013\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\141\004\005\001\001\000\002\001\001\000\004\004\067" +
    "\001\001\000\002\001\001\000\004\013\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\053\001\001\000\002\001\001\000" +
    "\004\013\052\001\001\000\004\013\051\001\001\000\004" +
    "\013\050\001\001\000\004\013\047\001\001\000\002\001" +
    "\001\000\004\013\046\001\001\000\004\013\045\001\001" +
    "\000\004\013\044\001\001\000\004\013\043\001\001\000" +
    "\004\013\042\001\001\000\004\013\041\001\001\000\004" +
    "\013\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\132\013\133\001\001\000\004\013" +
    "\125\001\001\000\006\015\100\016\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\105\004\005\001\001\000\004\004\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\112\004\005\001\001\000\004\004\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\067\001\001\000\002\001\001\000\004\013\144" +
    "\001\001\000\002\001\001\000\006\004\147\005\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\223\004" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\163\001\001\000\002\001\001\000\004\004\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\132" +
    "\005\216\013\214\001\001\000\004\013\207\001\001\000" +
    "\006\015\175\016\077\001\001\000\002\001\001\000\004" +
    "\016\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\201\004\005\001\001\000\004\004\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\205\004" +
    "\005\001\001\000\004\004\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\067\001\001\000\002\001\001\000\004\013" +
    "\226\001\001\000\002\001\001\000\006\004\147\005\230" +
    "\001\001\000\002\001\001\000\006\004\161\005\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\236\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\244\004\005\001\001\000\004\004\067\001" +
    "\001\000\002\001\001\000\004\013\247\001\001\000\002" +
    "\001\001\000\006\004\251\005\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\265\004\005\001\001\000" +
    "\004\004\067\001\001\000\002\001\001\000\004\013\270" +
    "\001\001\000\002\001\001\000\004\004\251\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 lexer.init();              
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


        public class Expr{
                Node node;
                String context;
                public Expr(Node node,String context){
                       this.node = node;
                       this.context = context;
               }
        }
        public static String name="";
        public static Node treeroot;
        public static void WTF(String context){
               try{
                     OutputStream f = new FileOutputStream(name+".java");
                     String fileTemplate = "import java.io.*;\nimport java.util.Random;\npublic class " +name+"{\npublic static int selfRandom(int i){\nRandom rand=new Random();\nint result=(int)(Math.random()*(i+1));\nreturn result;\n}\n"+context+"\n}";            
                     //String file = fileTemplate.format(name,context);
                     f .write(fileTemplate.getBytes());
               }catch(Exception e){}

        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmt_seq 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //RESULT = s;
              Node node = new Node("program");
              node.add(s.node);
              treeroot = node;
                System.out.println(s.context);
                //WTF(s);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmt_seq ::= stmt_seq stmt 
            {
              Expr RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String context = s1.context+s2.context;
              Node node = new Node("stmt_seq");
              node.add(s1.node);
              node.add(s2.node);
              RESULT = new Expr(node,context);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt_seq ::= stmt 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String context = s.context;
              Node node = new Node("stmt_seq");
              node.add(s.node);
              Expr result = new Expr(node,context);
              RESULT = result;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= IF LPAREN exp RPAREN stmt1 ELSE stmt 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr s1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String context = "if"+"("+e.context+")"+"\n"+s1.context+"else"+" "+s2.context;
              Node nodeif = new Node("if");
              Node nodelp = new Node("lp");
              Node noderp = new Node("rp");
              Node nodeelse = new Node("else");
              Node node = new Node("stmt");
              node.add(nodeif);
              node.add(nodelp);
              node.add(e.node);
              node.add(noderp);
              node.add(s1.node);
              node.add(nodeelse);
              node.add(s2.node);
              RESULT = new Expr(node,context);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= IF LPAREN exp RPAREN stmt 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String context = "if"+"("+e.context+")"+"\n"+s.context;
              Node nodeif = new Node("if");
              Node nodelp = new Node("lp");
              Node noderp = new Node("rp");
              Node node = new Node("stmt");
              node.add(nodeif);
              node.add(nodelp);
              node.add(e.node);
              node.add(noderp);
              node.add(s.node);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= WHILE LPAREN exp RPAREN stmt 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String context = "while"+"("+e.context+")"+" "+s.context;
              Node nodewhile = new Node("while");
              Node nodelp = new Node("lp");
              Node noderp = new Node("rp");
              Node node = new Node("stmt");
              node.add(nodewhile);
              node.add(nodelp);
              node.add(e.node);
              node.add(noderp);
              node.add(s.node);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= ID RELOP8 exp SEMI 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              String context = id+"="+e.context+";"+"\n";
              Node nodeid = new Node(id);
              Node noderelop8 = new Node("=");
              Node nodesemi = new Node(";");
              Node node = new Node("stmt");
              node.add(nodeid);
              node.add(noderelop8);
              node.add(e.node);
              node.add(nodesemi);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= ID LB exp RB RELOP8 exp SEMI 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              String context = id+"["+e1.context+"]"+"="+e2.context+";"+"\n"; 
              Node nodeid = new Node(id);
              Node nodelb = new Node("[");
              Node noderb = new Node("]");
              Node noderelop8 = new Node("=");
              Node nodesemi = new Node(";");
              Node node = new Node("stmt");
              node.add(nodeid);
              node.add(nodelb);
              node.add(noderb);
              node.add(e1.node);
              node.add(noderelop8);
              node.add(e2.node);
              node.add(nodesemi);
              RESULT = new Expr(node,context);                  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= ID RELOP8 stmt 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String context = id + "=" +s.context;
              Node nodeid = new Node(id);
              Node noderelop8 = new Node("=");
              Node node = new Node("stmt");
              node.add(nodeid);
              node.add(noderelop8);
              node.add(s.node);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= RETURN SEMI 
            {
              Expr RESULT =null;
		
              String context = "return"+";"+"\n";
              Node nodereturn = new Node("return");
              Node nodesemi = new Node(";");
              Node node = new Node("stmt");
              node.add(nodereturn);
              node.add(nodesemi);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= RETURN exp SEMI 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              String context = "return"+" "+e.context+";"+"\n";
              Node nodereturn = new Node("return");
              Node nodesemi = new Node(";");
              Node node = new Node("stmt");
              node.add(nodereturn);
              node.add(e.node);
              node.add(nodesemi);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= LC stmt_seq RC 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              String context = "{"+"\n"+s.context+"}"+"\n";
              Node nodelc = new Node("{");
              Node noderc = new Node("}");
              Node node = new Node("stmt");
              node.add(nodelc);
              node.add(s.node);
              node.add(noderc);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= ID LPAREN RPAREN SEMI 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              String context = id+"()"+";"+"\n";
              Node nodeid = new Node(id);
              Node nodelp = new Node("(");
              Node noderp = new Node(")");
              Node nodesemi = new Node(";");
              Node node = new Node("stmt");
              node.add(nodeid);
              node.add(nodelp);
              node.add(noderp);
              node.add(nodesemi);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= ID LPAREN params RPAREN SEMI 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              String context = id+"("+p.context+")"+";"+"\n";
              Node nodeid = new Node(id);
              Node nodelp = new Node("(");
              Node noderp = new Node(")");
              Node nodesemi = new Node(";");
              Node node = new Node("stmt");
              node.add(nodeid);
              node.add(nodelp);
              node.add(p.node);
              node.add(noderp);
              node.add(nodesemi);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= ID LPAREN RPAREN LC stmt_seq RC 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                //RESULT =id+"()"+"{"+"\n"+s+"}"+"\n";
              String context = "public static int "+id+"()"+"{"+"\n"+s.context+"}"+"\n";
              Node nodeid = new Node(id);
              Node nodelp = new Node("(");
              Node noderp = new Node(")");
              Node nodelc = new Node("{");
              Node noderc = new Node("}");
              Node node = new Node("stmt");
              node.add(nodeid);
              node.add(nodelp);
              node.add(noderp);
              node.add(nodelc);
              node.add(s.node);
              node.add(noderc);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= VAR ID SEMI 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                //RESULT = "var"+" "+id+";"+"\n";
                String context = "int "+id+";"+"\n";
                Node nodevar = new Node("var");
                Node nodeid = new Node(id);
                Node nodesemi = new Node(";");
                Node node = new Node("stmt");
                node.add(nodevar);
                node.add(nodeid);
                node.add(nodesemi);
                RESULT = new Expr(node,context);

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= VAR ID LB exp RB SEMI 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                //RESULT = "var"+" "+id+"["+e+"]"+";"+"\n";
              String context = " int [] "+id+"= new int "+"["+e.context+"]"+";"+"\n";
               Node nodeid = new Node(id);
              Node nodelp = new Node("(");
              Node noderp = new Node(")");
              Node nodesemi = new Node(";");
              Node node = new Node("stmt");
              node.add(nodeid);
              node.add(nodelp);
              node.add(e.node);
              node.add(noderp);
              node.add(nodesemi);
              RESULT = new Expr(node,context);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= ID LPAREN params RPAREN LC stmt_seq RC 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                //RESULT =id+"("+p+")"+"{"+"\n"+s+"}"+"\n";
              String context = "public static int "+id+"("+p.context+")"+"{"+"\n"+s.context+"}"+"\n";
              Node nodeid = new Node(id);
              Node nodelp = new Node("(");
              Node noderp = new Node(")");
              Node nodelc = new Node("{");
              Node noderc = new Node("}");
              Node node = new Node("stmt");
              node.add(nodeid);
              node.add(nodelp);
              node.add(p.node);
              node.add(noderp);
              node.add(nodelc);
              node.add(s.node);
              node.add(noderc);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= MAIN LPAREN RPAREN LC stmt_seq RC 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                 //RESULT = "main"+"()"+"{"+"\n"+s+"}";
              String context = "public static void main(String []args)"+"{"+"\n"+s.context+"}";
              Node nodemain = new Node("main");
              Node nodelp = new Node("(");
              Node noderp = new Node(")");
              Node nodelc = new Node("{");
              Node noderc = new Node("}");
              Node node = new Node("stmt");
              node.add(nodemain);
              node.add(nodelp);
              node.add(noderp);
              node.add(nodelc);
              node.add(s.node);
              node.add(noderc);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= PRINT LPAREN exp RPAREN SEMI 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              String context = "System.out.println"+"("+e.context+")"+";"+"\n";
              Node nodeprint = new Node("print");
              Node nodelp = new Node("(");
              Node noderp = new Node(")");
              Node nodesemi = new Node(";");
              Node node = new Node("stmt");
              node.add(nodeprint);
              node.add(nodelp);
              node.add(e.node);
              node.add(noderp);
              node.add(nodesemi);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt1 ::= IF LPAREN exp RPAREN stmt1 ELSE stmt1 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr s1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr s2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String context = "if"+"("+e.context+")"+"\n"+s1.context+"else"+" "+s2.context;
              Node nodeif = new Node("if");
              Node nodelp = new Node("lp");
              Node noderp = new Node("rp");
              Node nodeelse = new Node("else");
              Node node = new Node("stmt1");
              node.add(nodeif);
              node.add(nodelp);
              node.add(e.node);
              node.add(noderp);
              node.add(s1.node);
              node.add(nodeelse);
              node.add(s2.node);
              RESULT = new Expr(node,context);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt1 ::= WHILE LPAREN exp RPAREN stmt1 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String context = "while"+"("+e.context+")"+" "+s.context;
              Node nodewhile = new Node("while");
              Node nodelp = new Node("lp");
              Node noderp = new Node("rp");
              Node node = new Node("stmt1");
              node.add(nodewhile);
              node.add(nodelp);
              node.add(e.node);
              node.add(noderp);
              node.add(s.node);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt1 ::= ID RELOP8 exp SEMI 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              String context = id+"="+e.context+";"+"\n";
              Node nodeid = new Node(id);
              Node noderelop8 = new Node("=");
              Node nodesemi = new Node(";");
              Node node = new Node("stmt1");
              node.add(nodeid);
              node.add(noderelop8);
              node.add(e.node);
              node.add(nodesemi);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt1 ::= ID LB exp RB RELOP8 exp SEMI 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              String context = id+"["+e1.context+"]"+"="+e2.context+";"+"\n"; 
              Node nodeid = new Node(id);
              Node nodelb = new Node("[");
              Node noderb = new Node("]");
              Node noderelop8 = new Node("=");
              Node nodesemi = new Node(";");
              Node node = new Node("stmt1");
              node.add(nodeid);
              node.add(nodelb);
              node.add(noderb);
              node.add(e1.node);
              node.add(noderelop8);
              node.add(e2.node);
              node.add(nodesemi);
              RESULT = new Expr(node,context);                    
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt1 ::= ID RELOP8 stmt1 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
         String context = id + "=" +s.context;
              Node nodeid = new Node(id);
              Node noderelop8 = new Node("=");
              Node node = new Node("stmt1");
              node.add(nodeid);
              node.add(noderelop8);
              node.add(s.node);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt1 ::= RETURN SEMI 
            {
              Expr RESULT =null;
		
              String context = "return"+";"+"\n";
              Node nodereturn = new Node("return");
              Node nodesemi = new Node(";");
              Node node = new Node("stmt1");
              node.add(nodereturn);
              node.add(nodesemi);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt1 ::= RETURN exp SEMI 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              String context = "return"+" "+e.context+";"+"\n";
              Node nodereturn = new Node("return");
              Node nodesemi = new Node(";");
              Node node = new Node("stmt1");
              node.add(nodereturn);
              node.add(e.node);
              node.add(nodesemi);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt1 ::= LC stmt_seq RC 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              String context = "{"+"\n"+s.context+"}"+"\n";
              Node nodelc = new Node("{");
              Node noderc = new Node("}");
              Node node = new Node("stmt1");
              node.add(nodelc);
              node.add(s.node);
              node.add(noderc);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt1 ::= ID LPAREN RPAREN SEMI 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              String context = id+"()"+";"+"\n";
              Node nodeid = new Node(id);
              Node nodelp = new Node("(");
              Node noderp = new Node(")");
              Node nodesemi = new Node(";");
              Node node = new Node("stmt1");
              node.add(nodeid);
              node.add(nodelp);
              node.add(noderp);
              node.add(nodesemi);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt1 ::= ID LPAREN params RPAREN SEMI 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
              String context = id+"("+p.context+")"+";"+"\n";
              Node nodeid = new Node(id);
              Node nodelp = new Node("(");
              Node noderp = new Node(")");
              Node nodesemi = new Node(";");
              Node node = new Node("stmt1");
              node.add(nodeid);
              node.add(nodelp);
              node.add(p.node);
              node.add(noderp);
              node.add(nodesemi);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt1 ::= ID LPAREN RPAREN LC stmt_seq RC 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                //RESULT =id+"()"+"{"+"\n"+s+"}"+"\n";
              String context = "public static int "+id+"()"+"{"+"\n"+s.context+"}"+"\n";
              Node nodeid = new Node(id);
              Node nodelp = new Node("(");
              Node noderp = new Node(")");
              Node nodelc = new Node("{");
              Node noderc = new Node("}");
              Node node = new Node("stmt1");
              node.add(nodeid);
              node.add(nodelp);
              node.add(noderp);
              node.add(nodelc);
              node.add(s.node);
              node.add(noderc);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt1 ::= ID LPAREN params RPAREN LC stmt_seq RC 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                //RESULT =id+"("+p+")"+"{"+"\n"+s+"}"+"\n";
              String context = "public static int "+id+"("+p.context+")"+"{"+"\n"+s.context+"}"+"\n";
              Node nodeid = new Node(id);
              Node nodelp = new Node("(");
              Node noderp = new Node(")");
              Node nodelc = new Node("{");
              Node noderc = new Node("}");
              Node node = new Node("stmt1");
              node.add(nodeid);
              node.add(nodelp);
              node.add(p.node);
              node.add(noderp);
              node.add(nodelc);
              node.add(s.node);
              node.add(noderc);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt1 ::= VAR ID SEMI 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                //RESULT = "var"+" "+id+";"+"\n";
                String context = "int "+id+";"+"\n";
                Node nodevar = new Node("var");
                Node nodeid = new Node(id);
                Node nodesemi = new Node(";");
                Node node = new Node("stmt1");
                node.add(nodevar);
                node.add(nodeid);
                node.add(nodesemi);
                RESULT = new Expr(node,context);

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt1 ::= VAR ID LB exp RB SEMI 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                //RESULT = "var"+" "+id+"["+e+"]"+";"+"\n";
              String context = " int [] "+id+"= new int "+"["+e.context+"]"+";"+"\n";
              Node nodeid = new Node(id);
              Node nodelp = new Node("(");
              Node noderp = new Node(")");
              Node nodesemi = new Node(";");
              Node node = new Node("stmt1");
              node.add(nodeid);
              node.add(nodelp);
              node.add(e.node);
              node.add(noderp);
              node.add(nodesemi);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt1 ::= MAIN LPAREN RPAREN LC stmt_seq RC 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                 //RESULT = "main"+"()"+"{"+"\n"+s+"}";
              String context = "public static void main(String []args)"+"{"+"\n"+s.context+"}";
              Node nodemain = new Node("main");
              Node nodelp = new Node("(");
              Node noderp = new Node(")");
              Node nodelc = new Node("{");
              Node noderc = new Node("}");
              Node node = new Node("stmt1");
              node.add(nodemain);
              node.add(nodelp);
              node.add(noderp);
              node.add(nodelc);
              node.add(s.node);
              node.add(noderc);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt1 ::= PRINT LPAREN exp RPAREN SEMI 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
         String context = "System.out.println"+"("+e.context+")"+";"+"\n";
              Node nodeprint = new Node("print");
              Node nodelp = new Node("(");
              Node noderp = new Node(")");
              Node nodesemi = new Node(";");
              Node node = new Node("stmt1");
              node.add(nodeprint);
              node.add(nodelp);
              node.add(e.node);
              node.add(noderp);
              node.add(nodesemi);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt1",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // params ::= params param 
            {
              Expr RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr p1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr p2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String context = p1.context+","+p2.context;
              Node node = new Node("params");
              node.add(p1.node);
              node.add(p2.node);
              RESULT = new Expr(node,context);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // params ::= param 
            {
              Expr RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr p = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String context = p.context;
                Node node = new Node("params");
                node.add(p.node);
                RESULT = new Expr(node,context);

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // param ::= VAR ID SEMI 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                //RESULT = "var"+" "+id+";";
                String context = "int "+id;
                Node nodevar = new Node("var");
                Node nodeid = new Node(id);
                Node nodesemi = new Node(";");
                Node node = new Node("param");
                node.add(nodevar);
                node.add(nodeid);
                node.add(nodesemi);
                RESULT = new Expr(node,context);

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // param ::= VAR ID LB RB SEMI 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                //RESULT = "var"+" "+id+"[]"+";";
              String context = "int "+"[] "+id;
              Node nodevar = new Node("var");
              Node nodeid = new Node(id);
              Node nodelb = new Node("[");
              Node noderb = new Node("]");
              Node nodesemi = new Node(";");
              Node node = new Node("param");
              node.add(nodevar);
              node.add(nodeid);
              node.add(nodelb);
              node.add(noderb);
              node.add(nodesemi);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // param ::= ID SEMI 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              String context = id;
              Node nodeid = new Node(id);
              Node nodesemi = new Node(";");
              Node node = new Node("param");
              node.add(nodeid);
              node.add(nodesemi);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // param ::= ID LB RB SEMI 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
              String context = id;
              Node nodeid = new Node(id);
              Node nodelb = new Node("[");
              Node noderb = new Node("]");
              Node nodesemi = new Node(";");
              Node node = new Node("param");
              node.add(nodeid);
              node.add(nodelb);
              node.add(noderb);
              node.add(nodesemi);
              RESULT = new Expr(node,context);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // param ::= NUMBER SEMI 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              String context = Integer.toString(n.intValue());
              Node nodenum = new Node(context);
              Node nodesemi = new Node(";");
              Node node = new Node("param");
              node.add(nodenum);
              node.add(nodesemi);
              RESULT = new Expr(node,context); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp RELOP1 exp 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String context = e1.context+"<"+e2.context;
                Node noderelop1 = new Node("<");
                Node node = new Node("exp");
                node.add(e1.node);
                node.add(noderelop1);
                node.add(e2.node);
                RESULT = new Expr(node,context);

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp RELOP2 exp 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String context = e1.context+"<="+e2.context;
                Node noderelop2 = new Node("<=");
                Node node = new Node("exp");
                node.add(e1.node);
                node.add(noderelop2);
                node.add(e2.node);
                RESULT = new Expr(node,context);

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp RELOP3 exp 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String context = e1.context+">"+e2.context;
                Node noderelop3 = new Node(">");
                Node node = new Node("exp");
                node.add(e1.node);
                node.add(noderelop3);
                node.add(e2.node);
                RESULT = new Expr(node,context);

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp RELOP4 exp 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String context = e1.context+">="+e2.context;
                Node noderelop4 = new Node(">=");
                Node node = new Node("exp");
                node.add(e1.node);
                node.add(noderelop4);
                node.add(e2.node);
                RESULT = new Expr(node,context);

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp RELOP5 exp 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //e==e
                String context = e1.context+"=="+e2.context;
                Node noderelop5 = new Node("==");
                Node node = new Node("exp");
                node.add(e1.node);
                node.add(noderelop5);
                node.add(e2.node);
                RESULT = new Expr(node,context);

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp RELOP6 exp 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //e!=e
                String context = e1.context+"!="+e2.context;
                Node noderelop6 = new Node("!=");
                Node node = new Node("exp");
                node.add(e1.node);
                node.add(noderelop6);
                node.add(e2.node);
                RESULT = new Expr(node,context);

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp RELOP7 exp 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //e&&e
                String context = e1.context+"&&"+e2.context;
                Node noderelop7 = new Node("&&");
                Node node = new Node("exp");
                node.add(e1.node);
                node.add(noderelop7);
                node.add(e2.node);
                RESULT = new Expr(node,context);

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp PLUS exp 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String context = e1.context+"+"+e2.context;
                Node nodeplus = new Node("+");
                Node node = new Node("exp");
                node.add(e1.node);
                node.add(nodeplus);
                node.add(e2.node);
                RESULT = new Expr(node,context);

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp MINUS exp 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String context = e1.context+"-"+e2.context;
                Node nodeminus = new Node("-");
                Node node = new Node("exp");
                node.add(e1.node);
                node.add(nodeminus);
                node.add(e2.node);
                RESULT = new Expr(node,context);

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp TIMES exp 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String context = e1.context+"*"+e2.context;
                Node nodetimes = new Node("*");
                Node node = new Node("exp");
                node.add(e1.node);
                node.add(nodetimes);
                node.add(e2.node);
                RESULT = new Expr(node,context);

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp DIVIDE exp 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String context = e1.context+"/"+e2.context;
                Node nodedivide = new Node("/");
                Node node = new Node("exp");
                node.add(e1.node);
                node.add(nodedivide);
                node.add(e2.node);
                RESULT = new Expr(node,context);

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= NUMBER 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String context = Integer.toString(n.intValue());
                Node nodenum = new Node(context);
                Node node = new Node("exp");
                node.add(nodenum);
                RESULT = new Expr(node,context);

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                String context = id;
                Node nodeid = new Node(context);
                Node node = new Node("exp");
                node.add(nodeid);
                RESULT = new Expr(node,context);

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= ID LB exp RB 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                String context = id+"["+e.context+"]";
                Node nodeid = new Node(id);
                Node nodelb = new Node("[");
                Node noderb = new Node("]");
                Node node = new Node("exp");
                node.add(nodeid);
                node.add(nodelb);
                node.add(e.node);
                node.add(noderb);
                RESULT = new Expr(node,context);

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= RANDOM LPAREN exp RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                String context = "selfRandom"+"("+e.context+")";
                Node noderandom = new Node("RANDOM");
                Node nodelp = new Node("(");
                Node noderp = new Node(")");
                Node node = new Node("exp");
                node.add(noderandom);
                node.add(nodelp);
                node.add(e.node);
                node.add(noderp);
                RESULT = new Expr(node,context);
 
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= LPAREN exp RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                String context = "("+e.context+")";
                Node nodelp = new Node("(");
                Node noderp = new Node(")");
                Node node = new Node("exp");
                node.add(nodelp);
                node.add(e.node);
                node.add(noderp);
                RESULT = new Expr(node,context);
 
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
