
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import flowchart.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\003\000\002\002\004\000\002\003" +
    "\011\000\002\005\004\000\002\004\004\000\002\004\002" +
    "\000\002\006\006\000\002\007\004\000\002\007\002\000" +
    "\002\044\007\000\002\044\002\000\002\010\004\000\002" +
    "\010\002\000\002\045\007\000\002\045\002\000\002\011" +
    "\004\000\002\011\002\000\002\046\007\000\002\046\002" +
    "\000\002\012\007\000\002\012\002\000\002\013\007\000" +
    "\002\013\005\000\002\014\004\000\002\014\005\000\002" +
    "\015\004\000\002\015\005\000\002\016\010\000\002\016" +
    "\006\000\002\017\003\000\002\017\002\000\002\047\003" +
    "\000\002\047\005\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\021\005\000\002\023\005\000\002\023\003\000\002\024" +
    "\005\000\002\024\002\000\002\022\006\000\002\025\003" +
    "\000\002\025\005\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\002\000\002\034\006\000\002\034\006\000\002\034" +
    "\003\000\002\032\006\000\002\037\004\000\002\027\010" +
    "\000\002\036\004\000\002\031\007\000\002\031\002\000" +
    "\002\030\004\000\002\030\002\000\002\040\003\000\002" +
    "\035\004\000\002\041\002\000\002\041\005\000\002\042" +
    "\005\000\002\042\003\000\002\042\002\000\002\033\006" +
    "\000\002\043\005\000\002\043\006\000\002\043\002\000" +
    "\002\050\005\000\002\050\005\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\004\000\002\050\003\000\002\050\004\000\002" +
    "\050\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\004\032\006\001\002\000\004\002\001\001" +
    "\002\000\004\002\260\001\002\000\004\064\257\001\002" +
    "\000\004\057\010\001\002\000\016\033\012\034\ufff9\035" +
    "\ufff9\036\ufff9\045\ufff9\046\ufff9\001\002\000\014\034\160" +
    "\035\ufff5\036\ufff5\045\ufff5\046\ufff5\001\002\000\016\034" +
    "\ufff7\035\ufff7\036\ufff7\045\ufff7\046\ufff7\064\ufff7\001\002" +
    "\000\006\045\014\046\ufffc\001\002\000\022\025\031\026" +
    "\021\027\025\037\026\043\022\046\uffce\057\uffce\064\033" +
    "\001\002\000\004\046\016\001\002\000\004\064\017\001" +
    "\002\000\004\062\020\001\002\000\004\002\uffff\001\002" +
    "\000\004\053\147\001\002\000\012\021\054\053\053\063" +
    "\051\064\052\001\002\000\012\041\uffd3\042\uffd3\046\uffd3" +
    "\057\uffd3\001\002\000\012\041\uffcf\042\uffcf\046\uffcf\057" +
    "\uffcf\001\002\000\012\041\uffcb\042\uffcb\046\uffcb\057\uffcb" +
    "\001\002\000\012\021\054\053\053\063\051\064\052\001" +
    "\002\000\004\040\131\001\002\000\012\041\uffd5\042\uffd5" +
    "\046\uffd5\057\uffd5\001\002\000\004\053\126\001\002\000" +
    "\012\041\uffd2\042\uffd2\046\uffd2\057\uffd2\001\002\000\022" +
    "\011\uffb8\041\uffc0\042\uffc0\046\uffc0\053\047\055\uffb8\057" +
    "\uffc0\062\uffb8\001\002\000\012\041\uffd0\042\uffd0\046\uffd0" +
    "\057\uffd0\001\002\000\012\041\uffd1\042\uffd1\046\uffd1\057" +
    "\uffd1\001\002\000\004\044\042\001\002\000\006\046\ufffd" +
    "\057\040\001\002\000\026\025\031\026\021\027\025\037" +
    "\026\041\uffce\042\uffce\043\022\046\uffce\057\uffce\064\033" +
    "\001\002\000\012\041\uffd4\042\uffd4\046\uffd4\057\uffd4\001" +
    "\002\000\022\025\031\026\021\027\025\037\026\043\022" +
    "\046\uffce\057\uffce\064\033\001\002\000\006\046\044\057" +
    "\040\001\002\000\012\041\uffca\042\uffca\046\uffca\057\uffca" +
    "\001\002\000\010\011\124\055\114\062\115\001\002\000" +
    "\012\041\uffc1\042\uffc1\046\uffc1\057\uffc1\001\002\000\016" +
    "\021\054\053\053\054\uffbc\061\uffbc\063\051\064\052\001" +
    "\002\000\006\054\122\061\121\001\002\000\060\004\uffa9" +
    "\005\uffa9\006\uffa9\007\uffa9\010\uffa9\012\uffa9\013\uffa9\014" +
    "\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\022\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\044\uffa9\046\uffa9\047\uffa9\054\uffa9\056" +
    "\uffa9\057\uffa9\061\uffa9\001\002\000\064\004\uffb8\005\uffb8" +
    "\006\uffb8\007\uffb8\010\uffb8\012\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\022\uffb8\040\uffb8\041\uffb8" +
    "\042\uffb8\044\uffb8\046\uffb8\047\uffb8\054\uffb8\055\uffb8\056" +
    "\uffb8\057\uffb8\061\uffb8\062\uffb8\001\002\000\012\021\054" +
    "\053\053\063\051\064\052\001\002\000\012\021\054\053" +
    "\053\063\051\064\052\001\002\000\040\004\064\005\056" +
    "\006\070\007\057\010\060\012\067\013\066\014\065\015" +
    "\063\016\062\017\061\020\072\022\071\054\uffbd\061\uffbd" +
    "\001\002\000\012\021\054\053\053\063\051\064\052\001" +
    "\002\000\012\021\054\053\053\063\051\064\052\001\002" +
    "\000\012\021\054\053\053\063\051\064\052\001\002\000" +
    "\012\021\054\053\053\063\051\064\052\001\002\000\012" +
    "\021\054\053\053\063\051\064\052\001\002\000\012\021" +
    "\054\053\053\063\051\064\052\001\002\000\012\021\054" +
    "\053\053\063\051\064\052\001\002\000\012\021\054\053" +
    "\053\063\051\064\052\001\002\000\012\021\054\053\053" +
    "\063\051\064\052\001\002\000\012\021\054\053\053\063" +
    "\051\064\052\001\002\000\012\021\054\053\053\063\051" +
    "\064\052\001\002\000\012\021\054\053\053\063\051\064" +
    "\052\001\002\000\012\021\054\053\053\063\051\064\052" +
    "\001\002\000\060\004\064\005\056\006\070\007\057\010" +
    "\060\012\067\013\066\014\065\015\063\016\062\017\061" +
    "\020\uffab\022\071\040\uffab\041\uffab\042\uffab\044\uffab\046" +
    "\uffab\047\uffab\054\uffab\056\uffab\057\uffab\061\uffab\001\002" +
    "\000\060\004\064\005\056\006\070\007\057\010\060\012" +
    "\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2" +
    "\022\uffb2\040\uffb2\041\uffb2\042\uffb2\044\uffb2\046\uffb2\047" +
    "\uffb2\054\uffb2\056\uffb2\057\uffb2\061\uffb2\001\002\000\060" +
    "\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\012\uffaf\013" +
    "\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\022\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\044\uffaf\046\uffaf\047\uffaf\054" +
    "\uffaf\056\uffaf\057\uffaf\061\uffaf\001\002\000\060\004\064" +
    "\005\056\006\070\007\057\010\060\012\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\022\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\044\uffb7\046\uffb7\047\uffb7\054\uffb7\056" +
    "\uffb7\057\uffb7\061\uffb7\001\002\000\060\004\064\005\056" +
    "\006\070\007\057\010\060\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\022\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\044\uffb6\046\uffb6\047\uffb6\054\uffb6\056\uffb6\057" +
    "\uffb6\061\uffb6\001\002\000\060\004\064\005\056\006\070" +
    "\007\057\010\060\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016" +
    "\uffb5\017\uffb5\020\uffb5\022\uffb5\040\uffb5\041\uffb5\042\uffb5" +
    "\044\uffb5\046\uffb5\047\uffb5\054\uffb5\056\uffb5\057\uffb5\061" +
    "\uffb5\001\002\000\060\004\uffb1\005\uffb1\006\070\007\057" +
    "\010\060\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\022\uffb1\040\uffb1\041\uffb1\042\uffb1\044\uffb1" +
    "\046\uffb1\047\uffb1\054\uffb1\056\uffb1\057\uffb1\061\uffb1\001" +
    "\002\000\060\004\064\005\056\006\070\007\057\010\060" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\022\uffb4\040\uffb4\041\uffb4\042\uffb4\044\uffb4\046\uffb4" +
    "\047\uffb4\054\uffb4\056\uffb4\057\uffb4\061\uffb4\001\002\000" +
    "\060\004\064\005\056\006\070\007\057\010\060\012\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\022" +
    "\uffb3\040\uffb3\041\uffb3\042\uffb3\044\uffb3\046\uffb3\047\uffb3" +
    "\054\uffb3\056\uffb3\057\uffb3\061\uffb3\001\002\000\060\004" +
    "\064\005\056\006\070\007\057\010\060\012\067\013\066" +
    "\014\065\015\063\016\062\017\uffac\020\uffac\022\071\040" +
    "\uffac\041\uffac\042\uffac\044\uffac\046\uffac\047\uffac\054\uffac" +
    "\056\uffac\057\uffac\061\uffac\001\002\000\060\004\uffad\005" +
    "\uffad\006\uffad\007\uffad\010\uffad\012\uffad\013\uffad\014\uffad" +
    "\015\uffad\016\uffad\017\uffad\020\uffad\022\uffad\040\uffad\041" +
    "\uffad\042\uffad\044\uffad\046\uffad\047\uffad\054\uffad\056\uffad" +
    "\057\uffad\061\uffad\001\002\000\060\004\uffae\005\uffae\006" +
    "\uffae\007\uffae\010\uffae\012\uffae\013\uffae\014\uffae\015\uffae" +
    "\016\uffae\017\uffae\020\uffae\022\uffae\040\uffae\041\uffae\042" +
    "\uffae\044\uffae\046\uffae\047\uffae\054\uffae\056\uffae\057\uffae" +
    "\061\uffae\001\002\000\060\004\uffb0\005\uffb0\006\070\007" +
    "\057\010\060\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\022\uffb0\040\uffb0\041\uffb0\042\uffb0\044" +
    "\uffb0\046\uffb0\047\uffb0\054\uffb0\056\uffb0\057\uffb0\061\uffb0" +
    "\001\002\000\060\004\064\005\056\006\070\007\057\010" +
    "\060\012\067\013\066\014\065\015\063\016\062\017\uffaa" +
    "\020\uffaa\022\071\040\uffaa\041\uffaa\042\uffaa\044\uffaa\046" +
    "\uffaa\047\uffaa\054\uffaa\056\uffaa\057\uffaa\061\uffaa\001\002" +
    "\000\036\004\064\005\056\006\070\007\057\010\060\012" +
    "\067\013\066\014\065\015\063\016\062\017\061\020\072" +
    "\022\071\054\112\001\002\000\060\004\uffa7\005\uffa7\006" +
    "\uffa7\007\uffa7\010\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7" +
    "\016\uffa7\017\uffa7\020\uffa7\022\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\044\uffa7\046\uffa7\047\uffa7\054\uffa7\056\uffa7\057\uffa7" +
    "\061\uffa7\001\002\000\064\004\uffa8\005\uffa8\006\uffa8\007" +
    "\uffa8\010\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8" +
    "\017\uffa8\020\uffa8\022\uffa8\040\uffa8\041\uffa8\042\uffa8\044" +
    "\uffa8\046\uffa8\047\uffa8\054\uffa8\055\114\056\uffa8\057\uffa8" +
    "\061\uffa8\062\115\001\002\000\012\021\054\053\053\063" +
    "\051\064\052\001\002\000\004\064\116\001\002\000\066" +
    "\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012" +
    "\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba" +
    "\022\uffba\040\uffba\041\uffba\042\uffba\044\uffba\046\uffba\047" +
    "\uffba\054\uffba\055\uffba\056\uffba\057\uffba\061\uffba\062\uffba" +
    "\001\002\000\036\004\064\005\056\006\070\007\057\010" +
    "\060\012\067\013\066\014\065\015\063\016\062\017\061" +
    "\020\072\022\071\056\120\001\002\000\066\004\uffb9\005" +
    "\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\022\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\044\uffb9\046\uffb9\047\uffb9\054\uffb9" +
    "\055\uffb9\056\uffb9\057\uffb9\061\uffb9\062\uffb9\001\002\000" +
    "\012\021\054\053\053\063\051\064\052\001\002\000\012" +
    "\041\uffbf\042\uffbf\046\uffbf\057\uffbf\001\002\000\040\004" +
    "\064\005\056\006\070\007\057\010\060\012\067\013\066" +
    "\014\065\015\063\016\062\017\061\020\072\022\071\054" +
    "\uffbe\061\uffbe\001\002\000\012\021\054\053\053\063\051" +
    "\064\052\001\002\000\044\004\064\005\056\006\070\007" +
    "\057\010\060\012\067\013\066\014\065\015\063\016\062" +
    "\017\061\020\072\022\071\041\uffbb\042\uffbb\046\uffbb\057" +
    "\uffbb\001\002\000\012\021\054\053\053\063\051\064\052" +
    "\001\002\000\036\004\064\005\056\006\070\007\057\010" +
    "\060\012\067\013\066\014\065\015\063\016\062\017\061" +
    "\020\072\022\071\054\130\001\002\000\012\041\uffcc\042" +
    "\uffcc\046\uffcc\057\uffcc\001\002\000\026\025\031\026\021" +
    "\027\025\037\026\041\uffce\042\uffce\043\022\046\uffce\057" +
    "\uffce\064\033\001\002\000\012\041\uffc5\042\uffc5\046\uffc5" +
    "\057\040\001\002\000\010\041\135\042\134\046\uffc3\001" +
    "\002\000\022\025\uffc2\026\uffc2\027\uffc2\037\uffc2\043\uffc2" +
    "\046\uffc2\057\uffc2\064\uffc2\001\002\000\012\021\054\053" +
    "\053\063\051\064\052\001\002\000\022\025\031\026\021" +
    "\027\025\037\026\043\022\046\uffce\057\uffce\064\033\001" +
    "\002\000\004\046\140\001\002\000\012\041\uffc8\042\uffc8" +
    "\046\uffc8\057\uffc8\001\002\000\006\046\uffc4\057\040\001" +
    "\002\000\036\004\064\005\056\006\070\007\057\010\060" +
    "\012\067\013\066\014\065\015\063\016\062\017\061\020" +
    "\072\022\071\040\143\001\002\000\026\025\031\026\021" +
    "\027\025\037\026\041\uffce\042\uffce\043\022\046\uffce\057" +
    "\uffce\064\033\001\002\000\012\041\uffc6\042\uffc6\046\uffc6" +
    "\057\040\001\002\000\036\004\064\005\056\006\070\007" +
    "\057\010\060\012\067\013\066\014\065\015\063\016\062" +
    "\017\061\020\072\022\071\040\uffc7\001\002\000\036\004" +
    "\064\005\056\006\070\007\057\010\060\012\067\013\066" +
    "\014\065\015\063\016\062\017\061\020\072\022\071\044" +
    "\uffc9\001\002\000\012\021\054\053\053\063\051\064\052" +
    "\001\002\000\036\004\064\005\056\006\070\007\057\010" +
    "\060\012\067\013\066\014\065\015\063\016\062\017\061" +
    "\020\072\022\071\054\151\001\002\000\012\041\uffcd\042" +
    "\uffcd\046\uffcd\057\uffcd\001\002\000\016\034\ufffa\035\ufffa" +
    "\036\ufffa\045\ufffa\046\ufffa\064\153\001\002\000\004\011" +
    "\154\001\002\000\012\021\054\053\053\063\051\064\052" +
    "\001\002\000\036\004\064\005\056\006\070\007\057\010" +
    "\060\012\067\013\066\014\065\015\063\016\062\017\061" +
    "\020\072\022\071\057\156\001\002\000\016\034\ufff8\035" +
    "\ufff8\036\ufff8\045\ufff8\046\ufff8\064\ufff8\001\002\000\012" +
    "\035\213\036\ufff1\045\ufff1\046\ufff1\001\002\000\014\035" +
    "\ufff3\036\ufff3\045\ufff3\046\ufff3\064\ufff3\001\002\000\014" +
    "\035\ufff6\036\ufff6\045\ufff6\046\ufff6\064\162\001\002\000" +
    "\004\011\163\001\002\000\014\023\164\024\172\030\165" +
    "\031\173\064\167\001\002\000\010\046\uffde\054\uffde\057" +
    "\uffde\001\002\000\010\046\uffd7\057\uffd7\064\201\001\002" +
    "\000\004\057\177\001\002\000\010\046\uffe0\054\uffe0\057" +
    "\uffe0\001\002\000\010\046\uffdf\054\uffdf\057\uffdf\001\002" +
    "\000\010\046\uffdc\054\uffdc\057\uffdc\001\002\000\010\046" +
    "\uffdd\054\uffdd\057\uffdd\001\002\000\012\021\054\053\053" +
    "\063\051\064\052\001\002\000\036\004\064\005\056\006" +
    "\070\007\057\010\060\012\067\013\066\014\065\015\063" +
    "\016\062\017\061\020\072\022\071\047\175\001\002\000" +
    "\014\023\164\024\172\030\165\031\173\064\167\001\002" +
    "\000\010\046\uffd6\054\uffd6\057\uffd6\001\002\000\014\035" +
    "\ufff4\036\ufff4\045\ufff4\046\ufff4\064\ufff4\001\002\000\006" +
    "\060\210\061\207\001\002\000\006\060\uffe2\061\uffe2\001" +
    "\002\000\006\046\uffd9\057\uffd9\001\002\000\006\046\205" +
    "\057\204\001\002\000\010\046\uffd7\057\uffd7\064\201\001" +
    "\002\000\010\046\uffdb\054\uffdb\057\uffdb\001\002\000\006" +
    "\046\uffda\057\uffda\001\002\000\004\064\212\001\002\000" +
    "\014\023\164\024\172\030\165\031\173\064\167\001\002" +
    "\000\006\046\uffd8\057\uffd8\001\002\000\006\060\uffe1\061" +
    "\uffe1\001\002\000\012\036\uffef\045\uffef\046\uffef\064\uffef" +
    "\001\002\000\010\036\uffed\045\uffed\046\uffed\001\002\000" +
    "\010\036\216\045\ufffb\046\ufffb\001\002\000\004\064\232" +
    "\001\002\000\004\057\220\001\002\000\016\033\012\034" +
    "\ufff9\035\ufff9\036\ufff9\045\ufff9\046\ufff9\001\002\000\006" +
    "\045\224\046\225\001\002\000\004\057\223\001\002\000" +
    "\010\036\uffee\045\uffee\046\uffee\001\002\000\022\025\031" +
    "\026\021\027\025\037\026\043\022\046\uffce\057\uffce\064" +
    "\033\001\002\000\004\064\226\001\002\000\004\057\uffeb" +
    "\001\002\000\006\046\230\057\040\001\002\000\004\064" +
    "\231\001\002\000\004\057\uffec\001\002\000\006\053\234" +
    "\057\uffea\001\002\000\004\057\uffe9\001\002\000\010\035" +
    "\235\054\236\064\uffe3\001\002\000\004\064\uffe4\001\002" +
    "\000\004\057\uffe8\001\002\000\006\054\244\057\245\001" +
    "\002\000\004\064\201\001\002\000\006\060\242\061\207" +
    "\001\002\000\014\023\164\024\172\030\165\031\173\064" +
    "\167\001\002\000\006\054\uffe5\057\uffe5\001\002\000\004" +
    "\057\uffe7\001\002\000\006\035\235\064\uffe3\001\002\000" +
    "\004\064\201\001\002\000\006\060\250\061\207\001\002" +
    "\000\014\023\164\024\172\030\165\031\173\064\167\001" +
    "\002\000\006\054\uffe6\057\uffe6\001\002\000\012\036\ufff2" +
    "\045\ufff2\046\ufff2\064\201\001\002\000\006\060\254\061" +
    "\207\001\002\000\014\023\164\024\172\030\165\031\173" +
    "\064\167\001\002\000\004\057\256\001\002\000\012\036" +
    "\ufff0\045\ufff0\046\ufff0\064\ufff0\001\002\000\004\057\ufffe" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\010\002\004\003\003\005\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\012\007\010\001\001\000\004\010" +
    "\156\001\001\000\004\044\151\001\001\000\004\004\014" +
    "\001\001\000\024\025\036\026\027\027\034\032\033\033" +
    "\022\034\023\035\031\036\026\037\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\041\045\043\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\026\040\027\034\032\033\033" +
    "\022\034\023\035\031\036\026\037\035\001\001\000\002" +
    "\001\001\000\024\025\042\026\027\027\034\032\033\033" +
    "\022\034\023\035\031\036\026\037\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\042\047\050\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\112\001\001\000\004\050" +
    "\110\001\001\000\004\050\107\001\001\000\002\001\001" +
    "\000\004\050\106\001\001\000\004\050\105\001\001\000" +
    "\004\050\104\001\001\000\004\050\103\001\001\000\004" +
    "\050\102\001\001\000\004\050\101\001\001\000\004\050" +
    "\100\001\001\000\004\050\077\001\001\000\004\050\076" +
    "\001\001\000\004\050\075\001\001\000\004\050\074\001" +
    "\001\000\004\050\073\001\001\000\004\050\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\124\001\001\000\002\001\001\000\004\050" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\025\131\026\027\027\034\032\033\033\022\034\023\035" +
    "\031\036\026\037\035\001\001\000\004\031\132\001\001" +
    "\000\006\030\136\040\135\001\001\000\002\001\001\000" +
    "\004\050\141\001\001\000\024\025\140\026\027\027\034" +
    "\032\033\033\022\034\023\035\031\036\026\037\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\025\143\026\027\027\034\032" +
    "\033\033\022\034\023\035\031\036\026\037\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\213" +
    "\001\001\000\004\045\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\165\021\170\022\167\001\001" +
    "\000\002\001\001\000\010\023\202\024\201\047\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\173\001" +
    "\001\000\002\001\001\000\010\020\175\021\170\022\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\205\047\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\210\021\170" +
    "\022\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\251\001\001\000\004\012\214\001\001\000\004" +
    "\014\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\220\007\010\013\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\025\226\026" +
    "\027\027\034\032\033\033\022\034\023\035\031\036\026" +
    "\037\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\232\001\001\000\002\001\001\000\006\016\236\017" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\240\001\001\000\002\001\001\000" +
    "\010\020\242\021\170\022\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\245\001\001\000\004\047" +
    "\246\001\001\000\002\001\001\000\010\020\250\021\170" +
    "\022\167\001\001\000\002\001\001\000\004\047\252\001" +
    "\001\000\002\001\001\000\010\020\254\021\170\022\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 lexer.init();            
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


        public int i = 0;
        public flowchart.Module testModule = null;              // instance of a module
        public Procedure proc = null;                 // instance of a procedure
	public WhileStatement whileStmt = null;       // instance of a WHILE statement
        public WhileStatement tempwhile = null; 
	public IfStatement ifStmt = null;             // instance of a IF statement
        public IfStatement tempif = null; 
	public StatementSequence loopBody = null;     // instance of a loop body
        public int flag = 0;
        public int tempflag = 0;
        public int ifstatue = 0;
        public int tempifstatue =0;
        public int index = 0;
        public int a[]  = new int [999];
        
             

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= module_block 
            {
              Object RESULT =null;
		
        
                System.out.println("model_block");
                testModule.show();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module_block ::= module_block_head SEMI declarations module_main END IDENTIFIER DOT 
            {
              Object RESULT =null;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

               
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("module_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // module_block_head ::= MODULE IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                testModule = new flowchart.Module(id);
                flag = 0;
                tempflag = 0;
                ifstatue = 0;
                tempifstatue =0;
                a[index] = 0;
                System.out.println("model block "+id);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("module_block_head",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // module_main ::= BEGIN statement_sequence 
            {
              Object RESULT =null;
		
                System.out.println("model main");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("module_main",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // module_main ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("module_main",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declarations ::= const_declaration type_declaration var_declaration procedure_declaration 
            {
              Object RESULT =null;
		
                System.out.println("declarations ");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // const_declaration ::= CONST const_list 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("const");
                proc.add(new PrimitiveStatement("CONST "+cl));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const_declaration ::= 
            {
              Object RESULT =null;
		
                System.out.println("const empty");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // const_list ::= const_list IDENTIFIER RELOP8 expression SEMI 
            {
              String RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = cl+id+" = "+e+";";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // const_list ::= 
            {
              String RESULT =null;
		
                RESULT = "";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_declaration ::= TYPE type_list 
            {
              Object RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("type empty");
                proc.add(new PrimitiveStatement("TYPE "+tl));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_declaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_list ::= type_list IDENTIFIER RELOP8 type SEMI 
            {
              String RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                 RESULT = tl+id+" = "+t+";";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_list ::= 
            {
              String RESULT =null;
		
                RESULT = "";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_declaration ::= VAR var_list 
            {
              Object RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("var declaration");
                proc.add(new PrimitiveStatement("VAR "+vl));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_declaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_list ::= var_list identifier_list COLON type SEMI 
            {
              String RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String vl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String idl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = vl+idl+" : "+t+";";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_list ::= 
            {
              String RESULT =null;
		
                RESULT = "";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedure_declaration ::= procedure_declaration procedure_heading SEMI procedure_body SEMI 
            {
              Object RESULT =null;
		
                System.out.println("procedure declaration");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedure_declaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedure_body ::= declarations BEGIN statement_sequence END IDENTIFIER 
            {
              Object RESULT =null;
		
                System.out.println("pbbe");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procedure_body ::= declarations END IDENTIFIER 
            {
              Object RESULT =null;
		
                System.out.println("pe");
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // procedure_heading ::= PROCEDURE IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                proc = testModule.add(id);
                
                System.out.println(id);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // procedure_heading ::= PROCEDURE IDENTIFIER formal_parameters 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                proc = testModule.add(id);
                proc.add(new PrimitiveStatement("传入参数 "+fp));      
                System.out.println("phf");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // formal_parameters ::= LPAREN RPAREN 
            {
              String RESULT =null;
		
                RESULT = "空";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formal_parameters ::= LPAREN fp_section RPAREN 
            {
              String RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String fs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = fs;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // fp_section ::= fp_section SEMI var_if identifier_list COLON type 
            {
              String RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String fs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = fs + " ; "+vi+" "+idl+" , "+t;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fp_section",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fp_section ::= var_if identifier_list COLON type 
            {
              String RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = vi+" "+idl+" , "+t;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fp_section",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var_if ::= VAR 
            {
              String RESULT =null;
		
                RESULT = "VAR";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_if ::= 
            {
              String RESULT =null;
		
                RESULT = "";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // identifier_list ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = id;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // identifier_list ::= identifier_list COMMA IDENTIFIER 
            {
              String RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = idl+" , "+id;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = id;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= array_type 
            {
              String RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = at;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= INTEGER 
            {
              String RESULT =null;
		
                RESULT = "INTEGER";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= BOOLEAN 
            {
              String RESULT =null;
		
                RESULT = "BOOLEAN";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= record_type 
            {
              String RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = rt;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // record_type ::= RECORD field_list END 
            {
              String RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = "RECORD\n "+fl+"\nEND ";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // field_list ::= field_list SEMI field_part 
            {
              String RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = fl+" ; "+fp;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // field_list ::= field_part 
            {
              String RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = fp;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // field_part ::= identifier_list COLON type 
            {
              String RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = idl + " : "+t;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_part",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // field_part ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_part",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // array_type ::= ARRAY expression OF type 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = "ARRAY "+e+" OF "+t;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement_sequence ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement_sequence ::= statement_sequence SEMI statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= procedure_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= rw_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // rw_statement ::= READ LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                flag = a[index];
                System.out.println(flag);
                if (flag == 0) proc.add(new PrimitiveStatement("Read ("+e+")"));
                else if(flag == 1) whileStmt.getLoopBody().add(new PrimitiveStatement("Read ("+e+")"));
                else if(flag == 2 && ifstatue == 0) ifStmt.getFalseBody().add(new PrimitiveStatement("Read ("+e+")"));
                else if(flag == 2 && ifstatue == 1) ifStmt.getTrueBody().add(new PrimitiveStatement("Read ("+e+")"));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // rw_statement ::= WRITE LPAREN expression RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                flag = a[index];
                System.out.println(flag);
                if (flag == 0) proc.add(new PrimitiveStatement("Write ("+e+")"));
                else if(flag == 1) whileStmt.getLoopBody().add(new PrimitiveStatement("Write ("+e+")"));
                else if(flag == 2 && ifstatue == 0) ifStmt.getFalseBody().add(new PrimitiveStatement("Write ("+e+")"));
                else if(flag == 2 && ifstatue == 1) ifStmt.getTrueBody().add(new PrimitiveStatement("Write ("+e+")"));
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // rw_statement ::= Writeln 
            {
              Object RESULT =null;
		
                flag = a[index];
                System.out.println(flag);
                if (flag == 0) proc.add(new PrimitiveStatement("Writeln"));
                else if(flag == 1) whileStmt.getLoopBody().add(new PrimitiveStatement("Writeln"));
                else if(flag == 2 && ifstatue == 0) ifStmt.getFalseBody().add(new PrimitiveStatement("Writeln"));
                else if(flag == 2 && ifstatue == 1) ifStmt.getTrueBody().add(new PrimitiveStatement("Writeln"));
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // while_statement ::= while_head DO statement_sequence END 
            {
              Object RESULT =null;
		
                System.out.println("while end");
                System.out.println(tempflag);

                whileStmt = tempwhile;
                index = index - 1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // while_head ::= WHILE expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("while");
                System.out.println(flag);
                tempwhile = whileStmt;
                flag = a[index];
                whileStmt = new WhileStatement(e);
                if (flag == 0) proc.add(whileStmt);
                else if(flag == 1) tempwhile.getLoopBody().add(whileStmt);
                else if(flag == 2 && ifstatue == 0) ifStmt.getFalseBody().add(whileStmt);
                else if(flag == 2 && ifstatue == 1) ifStmt.getTrueBody().add(whileStmt);
                index = index+1;
                a[index] = 1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_head",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // if_statement ::= if_head THEN statement_sequence elsif_statement else_statement END 
            {
              Object RESULT =null;
		
                System.out.println(flag);
                ifStmt = tempif;
                index = index-1;
                System.out.println(flag);
                ifstatue = tempifstatue;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // if_head ::= IF expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("if");
                flag = a[index];
                tempif = ifStmt;
                tempflag = flag;
                tempifstatue = ifstatue;
                ifStmt = new IfStatement(e);
                if(flag == 0) proc.add(ifStmt);
                else if(flag ==1) whileStmt.getLoopBody().add(ifStmt);
                else if(flag == 2 && ifstatue == 0) ifStmt.getFalseBody().add(ifStmt);
                else if(flag == 2 && ifstatue == 1) ifStmt.getTrueBody().add(ifStmt);
                index = index + 1;
                a[index] = 2;
                ifstatue = 1;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_head",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // elsif_statement ::= elsif_statement ELSIF expression THEN statement_sequence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // elsif_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // else_statement ::= else_head statement_sequence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // else_head ::= ELSE 
            {
              Object RESULT =null;
		
                ifstatue = 0;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_head",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // procedure_call ::= IDENTIFIER actual_parameters 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                flag = a[index];
                if (flag == 0) proc.add(new PrimitiveStatement(id+" "+ap));
                else if(flag == 1) whileStmt.getLoopBody().add(new PrimitiveStatement(id+" "+ap));
                else if(flag == 2 && ifstatue == 0) ifStmt.getFalseBody().add(new PrimitiveStatement(id+" "+ap));
                else if(flag == 2 && ifstatue == 1) ifStmt.getTrueBody().add(new PrimitiveStatement(id+" "+ap));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_call",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // actual_parameters ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // actual_parameters ::= LPAREN ap_list RPAREN 
            {
              String RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String al = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = "("+al+")";
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ap_list ::= ap_list COMMA expression 
            {
              String RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String al = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = al+" , "+e;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ap_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ap_list ::= expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = e;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ap_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ap_list ::= 
            {
              String RESULT =null;
		
                RESULT = "";
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ap_list",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // assignment ::= IDENTIFIER selector RELOP8 expression 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                flag = a[index];
               if (flag == 0) proc.add(new PrimitiveStatement(id+s+" := "+e));
                else if(flag == 1) whileStmt.getLoopBody().add(new PrimitiveStatement(id+s+" := "+e));
                else if(flag == 2 && ifstatue == 0) ifStmt.getFalseBody().add(new PrimitiveStatement(id+s+" := "+e));
                else if(flag == 2 && ifstatue == 1) ifStmt.getTrueBody().add(new PrimitiveStatement(id+s+" := "+e));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // selector ::= selector DOT IDENTIFIER 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = s+"."+id;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // selector ::= selector LB expression RB 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = s+"["+e+"]";
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // selector ::= 
            {
              String RESULT =null;
		      RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression RELOP1 expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = e1+"&lt;"+e2; 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= expression RELOP2 expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = e1 + "&lt=" + e2;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= expression RELOP3 expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = e1 + "&gt;" + e2;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= expression RELOP4 expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = e1 + "&rt=" + e2;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= expression RELOP5 expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = e1 + " = " + e2;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= expression POUND expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = e1 + " #" + e2;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression PLUS expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = e1 + " + " + e2;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= expression MINUS expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = e1 + " - " + e2;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= expression TIMES expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = e1 + " * " + e2;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= expression DIVIDE expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = e1 + " / " + e2;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= expression MOD expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = e1 + " % " + e2;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= expression RELOP7 expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = e1 + " & " + e2;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= expression OR expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = e1 + " OR " + e2;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= REVERSE expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = "~ "+e;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= NUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = Integer.toString(n.intValue());
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= IDENTIFIER selector 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = id+s;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= LPAREN expression RPAREN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT ="( "+e+" )";
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
